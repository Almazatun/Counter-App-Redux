{"version":3,"sources":["components/Score-board/Score-board.module.css","components/Settings-board/Settings-board.module.css","react_redux.png","components/Button/Button.module.css","serviceWorker.ts","redux/reducer/reducer_counter.ts","redux/redux_store.ts","components/Button/Button.tsx","components/Score-board/Score-boardWithUseSelector.tsx","components/Settings-board/Settings-boardWithUseSelector.tsx","AppWithUseSelector.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","startValue","maxValue","disabled","incrementValue","disabledScoreBoard","disabledSettings","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","stateReducer","combineReducers","Counter","state","action","type","payload","store","createStore","subscribe","stringify","setItem","error","alert","saveState","getState","Button","props","className","style","Style","disable","onClick","title","ScoreBoardWithUseSelector","viewBord","CounterData","basicView","incrementEnd","box_first_done","box_first","incrementDisabled","resetDisabled","container","box_second","resetValue","SettingsBoardWithUseSelector","Input","height","fontSize","width","borderRadius","textAlign","backgroundColor","span","margin","value","onChange","event","getStartValue","parseInt","currentTarget","changeValueDisabled","getMaxValue","setSettingsParameters","AppWithUseSelector","useSelector","dispatch","useDispatch","src","logo","alt","getStartValueAC","getMaxValueAC","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,UAAY,iEAAiE,UAAY,4DAA4D,WAAa,8DAA8D,eAAiB,mE,iBCAnQD,EAAOC,QAAU,CAAC,UAAY,oEAAoE,UAAY,+DAA+D,WAAa,mE,qBCD1LD,EAAOC,QAAU,IAA0B,yC,gBCC3CD,EAAOC,QAAU,CAAC,MAAQ,uDAAuD,SAAW,2B,6JCWxEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCTFC,EAA0B,CAC1BC,WAAY,EACZC,SAAU,EACVC,UAAU,EACVC,eAAgB,KAChBC,oBAAoB,EACpBC,kBAAkB,G,OCWhBC,EArBmB,WACrB,IACI,IAAMC,EAAkBC,aAAaC,QAAQ,SAC7C,GAAwB,OAApBF,EACA,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GACL,QAaeC,GAEnBC,EAAeC,YAAgB,CAC/BC,QDe0B,WAAkE,IAAjEC,EAAgE,uDAAxDlB,EAAcmB,EAA0C,uCAC3F,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAO,eACAF,EADP,CACcjB,WAAYkB,EAAOE,QAASjB,eAAgBe,EAAOE,UAErE,IAAK,gBACD,OAAO,eACAH,EADP,CACchB,SAAUiB,EAAOE,UAEnC,IAAK,kBACD,OAAO,eACAH,EADP,CACcf,SAAUe,EAAMjB,WAAaiB,EAAMhB,UACtCgB,EAAMjB,WAAa,GACnBiB,EAAMjB,aAAeiB,EAAMhB,SAClCI,iBAAkBY,EAAMjB,WAAaiB,EAAMhB,UACpCgB,EAAMjB,WAAa,GACnBiB,EAAMjB,aAAeiB,EAAMhB,WAE1C,IAAK,kBACD,OAAO,eACAgB,EADP,CAEId,eAAgBc,EAAMd,eAAkBc,EAAMhB,SAAYgB,EAAMd,eAAkB,EAAIc,EAAMhB,WAEpG,IAAI,cACA,OAAO,eACAgB,EADP,CAEId,eAAgBc,EAAMjB,aAE9B,IAAK,YACD,OAAO,eACAiB,EADP,CAEId,eAAgBc,EAAMd,eACtBC,oBAAqB,EACrBC,kBAAkB,IAG1B,IAAK,6CACD,OAAO,eACAY,EADP,CAEIb,oBAAoB,EACpBC,kBAAkB,IAE1B,QACI,OAAOY,MCxDRI,EAAeC,YAAYR,EAAaR,GAInDe,EAAME,WAAU,kBAnBS,SAACN,GACtB,IACI,IAAMV,EAAkBG,KAAKc,UAAUP,GACvCT,aAAaiB,QAAQ,QAASlB,GAChC,MAAOmB,GACLC,MAAMD,IAcQE,CAAUP,EAAMQ,e,qDC9BzBC,EAA8C,SAACC,GACxD,OACI,4BAAQC,UAAWC,IAAMC,MAAOhC,SAAU6B,EAAMI,QAASC,QAASL,EAAMK,SAAUL,EAAMM,Q,gBCGnFC,EAAyF,SAACP,GAGnG,IAAIQ,EAAWR,EAAMS,YAAYxC,WAAa+B,EAAMS,YAAYvC,UAC7D8B,EAAMS,YAAYxC,WAAa,GAC/B+B,EAAMS,YAAYxC,aAAe+B,EAAMS,YAAYvC,SAAW,8CAC3D,yDAEFwC,EAAYV,EAAMS,YAAYpC,mBAAqBmC,EAAWR,EAAMS,YAAYrC,eAEhFuC,EAAeX,EAAMS,YAAYrC,iBAAmB4B,EAAMS,YAAYvC,SAAWgC,IAAMU,eAAiBV,IAAMW,UAC9GC,EAAoBd,EAAMS,YAAYpC,oBAAsB2B,EAAMS,YAAYrC,iBAAmB4B,EAAMS,YAAYvC,SACnH6C,EAAgBf,EAAMS,YAAYpC,sBAAwB2B,EAAMS,YAAYrC,iBAAmB4B,EAAMS,YAAYvC,UAGrH,OACI,yBAAK+B,UAAWC,IAAMc,WAClB,yBAAKf,UAAWU,GACZ,4BAAKD,IAET,yBAAKT,UAAWC,IAAMe,YAClB,kBAAC,EAAD,CAAQb,QAASU,EAAmBT,QAASL,EAAM5B,eAAgBkC,MAAO,cAC1E,kBAAC,EAAD,CAAQF,QAASW,EAAeV,QAASL,EAAMkB,WAAYZ,MAAO,a,gBClBrEa,EAA+F,SAACnB,GAEzG,IAgBIoB,EAAuB,CACvBC,OAAQ,OACRC,SAAU,OACVC,MAAO,QACPC,aAAc,OACdC,UAAW,SACXC,gBAAkB1B,EAAMS,YAAYtC,SAA8B,YAAnB,kBAE/CwD,EAAsB,CACtBC,OAAQ,QAIZ,OACI,yBAAK3B,UAAWC,IAAMc,WAClB,yBAAKf,UAAWC,IAAMW,WAClB,6BACI,0BAAMX,MAAOyB,GAAb,eACA,2BAAOE,MAAO7B,EAAMS,YAAYxC,WACzB6D,SAnCD,SAACC,GACnB/B,EAAMgC,cAAcC,SAASF,EAAMG,cAAcL,QACjD7B,EAAM7B,WACN6B,EAAMmC,uBAiCajC,MAAOkB,EACPhC,KAAM,YAEjB,6BACI,0BAAMc,MAAOyB,GAAb,aACA,2BAAOzB,MAAOkB,EACPU,SArCH,SAACC,GACjB/B,EAAMoC,YAAYH,SAASF,EAAMG,cAAcL,QAC/C7B,EAAM7B,WACN6B,EAAMmC,uBAmCaN,MAAO7B,EAAMS,YAAYvC,SACzBkB,KAAM,aAGrB,yBAAKa,UAAWC,IAAMe,YAClB,kBAAC,EAAD,CAAQZ,QArCS,WACzBL,EAAMqC,yBAoCyCjC,QAASJ,EAAMS,YAAYtC,UAAY6B,EAAMS,YAAYnC,iBAAkBgC,MAAO,sBCM1HgC,EArDqC,WAChD,IAAMrD,EAAUsD,aAAqC,SAAArD,GAAK,OAAIA,EAAMD,WAC9DuD,EAAWC,cA+BjB,OACI,yBAAKxC,UAAU,OACX,yBAAKyC,IAAKC,IAAMzC,MANR,CACZmB,OAAQ,QACRE,MAAO,SAI+BtB,UAAU,WAAW2C,IAAI,SAC3D,yBAAK3C,UAAW,WACZ,kBAAC,EAAD,CACIQ,YAAaxB,EACb+C,cA5BM,SAAC/D,GACnBuE,EL6DuB,SAACvE,GAC5B,MAAO,CAACmB,KAAM,kBAAmBC,QAASpB,GK9D7B4E,CAAgB5E,KA4BbmE,YAzBI,SAAClE,GACjBsE,EL4DqB,SAACtE,GAC1B,MAAO,CAACkB,KAAM,gBAAiBC,QAASnB,GK7D3B4E,CAAc5E,KAyBXC,SAvBC,WACbqE,EL6DG,CAACpD,KAAM,qBKtCE+C,oBArBY,WACxBK,ELsEG,CAACpD,KAAM,gDKjDEiD,sBAnBc,WAC1BG,ELgEG,CAACpD,KAAM,iBK3CF,kBAAE,EAAF,CAA4BqB,YAAaxB,EAASb,eA1CvC,WACnBoE,EL8EG,CAACpD,KAAM,qBKpC0B8B,WAxCrB,WACfsB,EL8EG,CAACpD,KAAM,sBM9FlB2D,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAU3D,MAAOA,GACb,kBAAC,EAAD,QAGR4D,SAASC,eAAe,SP2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/D,GACLgE,QAAQhE,MAAMA,EAAMiE,c","file":"static/js/main.d22451e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Score-board_container__hKD8l index_generalContainerSize__CtwFA\",\"box_first\":\"Score-board_box_first__3SsSe index_generalBoxFirst__3qPZc\",\"box_second\":\"Score-board_box_second__J9BOL index_generalBoxSecond__1FvsZ\",\"box_first_done\":\"Score-board_box_first_done__291cH index_generalBoxFirst__3qPZc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Settings-board_container__2m3Xy index_generalContainerSize__CtwFA\",\"box_first\":\"Settings-board_box_first__1nGzd index_generalBoxFirst__3qPZc\",\"box_second\":\"Settings-board_box_second__3P_ar index_generalBoxSecond__1FvsZ\"};","module.exports = __webpack_public_path__ + \"static/media/react_redux.99e0859d.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Style\":\"Button_Style__2y-t4 index_general_buttonStyle__3F7HS\",\"disabled\":\"Button_disabled__43or9\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type StateType = {\r\n    startValue: number\r\n    maxValue: number\r\n    disabled: boolean\r\n    incrementValue: number | null\r\n    disabledScoreBoard: boolean\r\n    disabledSettings: boolean\r\n}\r\n\r\nlet initialState: StateType = {\r\n    startValue: 0,\r\n    maxValue: 0,\r\n    disabled: false,\r\n    incrementValue: null,\r\n    disabledScoreBoard: true,\r\n    disabledSettings: false\r\n}\r\n\r\ntype StateCounterType = typeof initialState\r\n\r\nexport type ActionsType = GetStartValueType | GetMaxValueType | DisabledType |\r\n    IncrementValueType | ResetValue | SetValueType | changeValueDisabledScoreBoardButtonType\r\n\r\ntype IncrementValueType = { type: \"INCREMENT-VALUE\" };\r\ntype ResetValue = {type:'RESET-VALUE'}\r\ntype GetStartValueType = {\r\n    type: 'GET-START-VALUE'\r\n    payload: number\r\n};\r\ntype GetMaxValueType = {\r\n    type: 'GET-MAX-VALUE'\r\n    payload: number\r\n};\r\ntype DisabledType = {\r\n    type: 'DISABLED-SWITCH'\r\n}\r\ntype SetValueType = {\r\n    type: 'SET-VALUE'\r\n};\r\ntype changeValueDisabledScoreBoardButtonType = {\r\n    type: 'CHANGING-VALUE-DISABLED-SCORE-BOARD-BUTTON'\r\n};\r\n\r\n\r\nexport const reducerCounter = (state = initialState, action: ActionsType): StateCounterType => {\r\n    switch (action.type) {\r\n        case 'GET-START-VALUE':\r\n            return {\r\n                ...state, startValue: action.payload, incrementValue: action.payload\r\n            };\r\n        case 'GET-MAX-VALUE':\r\n            return {\r\n                ...state, maxValue: action.payload\r\n            };\r\n        case 'DISABLED-SWITCH':\r\n            return {\r\n                ...state, disabled: state.startValue > state.maxValue\r\n                    || state.startValue < 0\r\n                    || state.startValue === state.maxValue,\r\n                disabledSettings: state.startValue > state.maxValue\r\n                    || state.startValue < 0\r\n                    || state.startValue === state.maxValue\r\n            };\r\n        case 'INCREMENT-VALUE':\r\n            return {\r\n                ...state,\r\n                incrementValue: state.incrementValue! < state.maxValue ?  state.incrementValue! + 1 : state.maxValue\r\n            }\r\n        case'RESET-VALUE':\r\n            return {\r\n                ...state,\r\n                incrementValue: state.startValue\r\n            };\r\n        case \"SET-VALUE\":\r\n            return {\r\n                ...state,\r\n                incrementValue: state.incrementValue,\r\n                disabledScoreBoard:  false,\r\n                disabledSettings: true\r\n\r\n            }\r\n        case 'CHANGING-VALUE-DISABLED-SCORE-BOARD-BUTTON':\r\n            return {\r\n                ...state,\r\n                disabledScoreBoard: true,\r\n                disabledSettings: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const getStartValueAC = (startValue: number): GetStartValueType  => {\r\n    return {type: 'GET-START-VALUE', payload: startValue}\r\n};\r\nexport const getMaxValueAC = (maxValue: number): GetMaxValueType  => {\r\n    return {type: 'GET-MAX-VALUE', payload: maxValue}\r\n};\r\nexport const disabledButtonBooleanAC = (): DisabledType  => {\r\n    return {type: 'DISABLED-SWITCH'}\r\n};\r\nexport const incrementValueAC = (): IncrementValueType => {\r\n    return {type: 'INCREMENT-VALUE'}\r\n};\r\nexport const resetValueAC = (): ResetValue => {\r\n    return {type: 'RESET-VALUE'}\r\n};\r\nexport const setValueAC = () : SetValueType => {\r\n    return {type: 'SET-VALUE'}\r\n};\r\nexport const changeValueDisabledScoreBoardButtonAC = () : changeValueDisabledScoreBoardButtonType => {\r\n    return {type: 'CHANGING-VALUE-DISABLED-SCORE-BOARD-BUTTON'}\r\n};\r\n","\r\nimport {reducerCounter} from \"./reducer/reducer_counter\";\r\nimport {combineReducers, createStore, Store} from \"redux\";\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType ) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch (error) {\r\n        alert(error)\r\n    }\r\n};\r\n\r\nconst persistedState = loadState();\r\n\r\nlet stateReducer = combineReducers({\r\n    Counter: reducerCounter\r\n})\r\n\r\nexport let store: Store = createStore(stateReducer,persistedState )\r\n\r\nexport type AppStateType = ReturnType <typeof stateReducer>\r\n\r\nstore.subscribe(() => saveState(store.getState()))","import React from \"react\";\r\nimport style from './Button.module.css'\r\n\r\ntype ButtonType = { title?: string, onClick?: () => void, disable?: boolean }\r\n\r\n\r\nexport const Button: React.FunctionComponent<ButtonType> = (props:ButtonType) => {\r\n    return (\r\n        <button className={style.Style} disabled={props.disable} onClick={props.onClick}>{props.title}</button>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button} from \"../Button/Button\";\r\nimport style from './Score-board.module.css'\r\nimport {StateType} from \"../../redux/reducer/reducer_counter\";\r\n\r\ntype ScoreBoardWithUseSelectorPropsType = {\r\n    CounterData: StateType\r\n    incrementValue: () => void\r\n    resetValue: () => void\r\n}\r\n\r\nexport const ScoreBoardWithUseSelector: React.FunctionComponent<ScoreBoardWithUseSelectorPropsType> = (props: ScoreBoardWithUseSelectorPropsType) => {\r\n\r\n\r\n    let viewBord = props.CounterData.startValue > props.CounterData.maxValue\r\n    || props.CounterData.startValue < 0\r\n    || props.CounterData.startValue === props.CounterData.maxValue ? <p>Incorrect value</p>\r\n        : <p>Change value and press set</p>;\r\n\r\n    let basicView = props.CounterData.disabledScoreBoard ? viewBord : props.CounterData.incrementValue;\r\n\r\n    let incrementEnd = props.CounterData.incrementValue === props.CounterData.maxValue ? style.box_first_done : style.box_first\r\n    let incrementDisabled = props.CounterData.disabledScoreBoard || props.CounterData.incrementValue === props.CounterData.maxValue\r\n    let resetDisabled = props.CounterData.disabledScoreBoard || !(props.CounterData.incrementValue === props.CounterData.maxValue)\r\n\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={incrementEnd}>\r\n                <h1>{basicView}</h1>\r\n            </div>\r\n            <div className={style.box_second}>\r\n                <Button disable={incrementDisabled} onClick={props.incrementValue} title={'increment'}/>\r\n                <Button disable={resetDisabled} onClick={props.resetValue} title={'reset'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React, {ChangeEvent, CSSProperties} from \"react\";\r\nimport {Button} from \"../Button/Button\";\r\nimport style from \"./Settings-board.module.css\";\r\nimport {StateType} from \"../../redux/reducer/reducer_counter\";\r\n\r\n\r\ntype SettingsBoardWithUseSelectorPropsType = {\r\n    CounterData: StateType\r\n    getStartValue: (startValue: number) => void\r\n    getMaxValue: (maxValue: number) => void\r\n    disabled: () => void\r\n    changeValueDisabled: () => void\r\n    setSettingsParameters: () => void\r\n}\r\n\r\nexport const SettingsBoardWithUseSelector: React.FunctionComponent<SettingsBoardWithUseSelectorPropsType> = (props: SettingsBoardWithUseSelectorPropsType) => {\r\n\r\n    const onChangeStart = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.getStartValue(parseInt(event.currentTarget.value));\r\n        props.disabled();\r\n        props.changeValueDisabled();\r\n    };\r\n    const onChangeMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.getMaxValue(parseInt(event.currentTarget.value));\r\n        props.disabled()\r\n        props.changeValueDisabled();\r\n    };\r\n\r\n    const setSettingParameters = () => {\r\n        props.setSettingsParameters();\r\n    }\r\n\r\n\r\n    let Input: CSSProperties = {\r\n        height: '35px',\r\n        fontSize: '20px',\r\n        width: \"100px\",\r\n        borderRadius: '15px',\r\n        textAlign: \"center\",\r\n        backgroundColor: !props.CounterData.disabled ? 'mediumseagreen' : 'orangered'\r\n    }\r\n    let span: CSSProperties = {\r\n        margin: '20px'\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.box_first}>\r\n                <div>\r\n                    <span style={span}>start Value</span>\r\n                    <input value={props.CounterData.startValue}\r\n                           onChange={onChangeStart}\r\n                           style={Input}\r\n                           type={'number'}/>\r\n                </div>\r\n                <div>\r\n                    <span style={span}>max Value</span>\r\n                    <input style={Input}\r\n                           onChange={onChangeMax}\r\n                           value={props.CounterData.maxValue}\r\n                           type={'number'}/>\r\n                </div>\r\n            </div>\r\n            <div className={style.box_second}>\r\n                <Button onClick={setSettingParameters} disable={props.CounterData.disabled || props.CounterData.disabledSettings} title={'set parameters'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from 'react';\nimport './App.css';\nimport logo from './react_redux.png'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/redux_store\";\nimport {\n    changeValueDisabledScoreBoardButtonAC,\n    disabledButtonBooleanAC, getMaxValueAC,\n    getStartValueAC,\n    incrementValueAC,\n    resetValueAC, setValueAC,\n    StateType\n} from \"./redux/reducer/reducer_counter\";\n\nimport {ScoreBoardWithUseSelector} from \"./components/Score-board/Score-boardWithUseSelector\";\nimport {SettingsBoardWithUseSelector} from \"./components/Settings-board/Settings-boardWithUseSelector\";\n\n\nconst AppWithUseSelector: React.FunctionComponent = () => { // Other way to make Counter with Redux with UseSelector\n    const Counter = useSelector<AppStateType, StateType>(state => state.Counter)\n    const dispatch = useDispatch();\n    //==========================================Dispatch of Score-Board _07.08.2020\n    const incrementValue = () => {\n        dispatch(incrementValueAC())\n    };\n    const resetValue = () => {\n        dispatch(resetValueAC());\n    }\n    //==========================================Dispatch of Setting-Board __07.08.2020\n    const getStartValue = (startValue: number) => {\n        dispatch(getStartValueAC(startValue))\n\n    }\n    const getMaxValue = (maxValue: number) => {\n        dispatch(getMaxValueAC(maxValue))\n    }\n    const disabled = () => {\n        dispatch(disabledButtonBooleanAC())\n    }\n    const changeValueDisabled = () => {\n        dispatch(changeValueDisabledScoreBoardButtonAC())\n    }\n    const setSettingsParameters = () => {\n        dispatch(setValueAC())\n    }\n\n\n    let logoStyle = {\n        height: '200px',\n        width: '400px',\n    }\n    return (\n        <div className=\"App\">\n            <img src={logo} style={logoStyle} className=\"App-logo\" alt=\"logo\"/>\n            <div className={'Content'}>\n                <SettingsBoardWithUseSelector\n                    CounterData={Counter}\n                    getStartValue={getStartValue}\n                    getMaxValue={getMaxValue}\n                    disabled={disabled}\n                    changeValueDisabled={changeValueDisabled}\n                    setSettingsParameters={setSettingsParameters}\n\n                />\n                < ScoreBoardWithUseSelector CounterData={Counter} incrementValue={incrementValue}\n                                            resetValue={resetValue}/>\n            </div>\n        </div>\n    );\n}\n\nexport default AppWithUseSelector;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n//import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./redux/redux_store\";\r\nimport {Provider} from \"react-redux\";\r\nimport AppWithUseSelector from \"./AppWithUseSelector\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <AppWithUseSelector/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}